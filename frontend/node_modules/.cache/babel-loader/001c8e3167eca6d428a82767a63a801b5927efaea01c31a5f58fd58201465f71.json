{"ast":null,"code":"var _jsxFileName = \"/Users/ashishkumar/Desktop/Labs Co/Resume Projects/Smart Snapper/frontend/src/components/AudioRecord.js\",\n  _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport React from 'react';\nimport { CartContext } from '../CartContext';\nimport Alert from './Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioRecord = () => {\n  _s();\n  const {\n    auth,\n    formatDate,\n    formatTime,\n    user,\n    baseURL\n  } = useContext(CartContext);\n  let duration = 0;\n  let interval, intervalLoc;\n  const setAlertTime = time => {\n    setTimeout(() => {\n      setAlert(false);\n    }, time);\n  };\n  const handleClick = async () => {\n    await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: true\n    }).then(async screenStream => {\n      var micConstraints = {\n        audio: true\n      };\n      navigator.mediaDevices.getUserMedia(micConstraints).then(function (micStream) {\n        //create a new stream in which to pack everything together\n        var mediaStreamObj = new MediaStream();\n\n        //create new Audio Context\n        var context = new AudioContext();\n\n        //create new MediaStream destination. This is were our final stream will be.\n        var audioDestinationNode = context.createMediaStreamDestination();\n\n        //check to see if we have a microphone stream and only then add it\n        if (micStream && micStream.getAudioTracks().length > 0) {\n          //get the audio from the microphone stream\n          const micSource = context.createMediaStreamSource(micStream);\n\n          //set it's volume\n          const micGain = context.createGain();\n          micGain.gain.value = 1.0;\n\n          //add it to the destination\n          micSource.connect(micGain).connect(audioDestinationNode);\n        }\n\n        //check to see if we have a screen stream and only then add it\n        if (screenStream && screenStream.getAudioTracks().length > 0) {\n          //get the audio from the screen stream\n          const systemSource = context.createMediaStreamSource(screenStream);\n\n          //set it's volume (from 0.1 to 1.0)\n          const systemGain = context.createGain();\n          systemGain.gain.value = 1.0;\n\n          //add it to the destination\n          systemSource.connect(systemGain).connect(audioDestinationNode);\n        }\n\n        //add the combined audio stream\n        audioDestinationNode.stream.getAudioTracks().forEach(function (audioTrack) {\n          mediaStreamObj.addTrack(audioTrack);\n        });\n\n        // assets\n        let audio = document.querySelector(\".audioCtr\");\n        let recordAudio = document.querySelector(\".audio-sec-btn\");\n        let audioBtn = document.querySelector(\".audio-rec\");\n        let durationBtn = document.querySelector(\".audio-duration\");\n\n        // buttons\n        let audioPause = document.getElementById('audiobtnPauseReco');\n        let audioResume = document.getElementById('audiobtnResumeReco');\n        let audioStop = document.getElementById('audiobtnStopReco');\n        audioResume.style.display = \"none\";\n        audioPause.style.display = \"inline-block\";\n        audioStop.style.display = \"inline-block\";\n\n        // getting media tracks\n        let screenTrackWithAudio = screenStream.getTracks();\n        let audioTracks = micStream.getTracks();\n        // Chunk array to store the audio data\n        let _recordedChunks = [];\n        audio.srcObject = mediaStreamObj;\n        audio.defaultMuted = true;\n        recordAudio.style.display = \"flex\";\n        audioBtn.style.display = 'none';\n\n        // setting time\n        durationBtn.innerHTML = '00:00';\n        duration = 0;\n        runInterval();\n        let latitude = [],\n          longitude = [];\n        intervalLoc = setInterval(() => {\n          navigator.geolocation.getCurrentPosition(function (pos) {\n            let size = latitude.length;\n            let lt = pos.coords.latitude;\n            let ln = pos.coords.longitude;\n            console.log(lt, ln);\n            if (size !== 0) {\n              if (Math.abs(lt - latitude[size - 1]) > 0.0001 || Math.abs(ln - longitude[size - 1]) > 0.0001) {\n                latitude.push(lt);\n                longitude.push(ln);\n              }\n            } else {\n              latitude.push(lt);\n              longitude.push(ln);\n            }\n          });\n        }, 2000);\n\n        // setup media recorder \n        let mediaRecorder = new MediaRecorder(mediaStreamObj);\n\n        // Start event\n        mediaRecorder.start();\n        audioPause.addEventListener('click', () => {\n          mediaRecorder.pause();\n        });\n        audioResume.addEventListener('click', () => {\n          mediaRecorder.resume();\n        });\n        audioStop.addEventListener('click', () => {\n          mediaRecorder.stop();\n        });\n        mediaRecorder.ondataavailable = function (e) {\n          if (e.data.size > 0) _recordedChunks.push(e.data);\n        };\n        mediaRecorder.onpause = async () => {\n          audioPause.style.display = \"none\";\n          audioResume.style.display = \"inline-block\";\n          clearInterval(interval);\n        };\n        mediaRecorder.onresume = async () => {\n          audioResume.style.display = \"none\";\n          audioPause.style.display = \"inline-block\";\n          audioStop.style.display = \"inline-block\";\n          runInterval();\n        };\n        mediaRecorder.onstop = async function (ev) {\n          screenTrackWithAudio.forEach(track => {\n            track.stop();\n          });\n          audioTracks.forEach(track => {\n            track.stop();\n          });\n          clearInterval(interval);\n          recordAudio.style.display = \"none\";\n          audioBtn.style.display = 'inline-block';\n          let blob = new Blob(_recordedChunks, {\n            type: 'audio/mp3'\n          });\n          // let url = window.URL.createObjectURL(blob);\n          let fileName = prompt(\"Enter file name\", \"my-audio\");\n          let date = formatDate();\n          let time = formatTime();\n          clearInterval(intervalLoc);\n          for (let i = 0; i < latitude.length; i++) {\n            latitude[i] = latitude[i].toString();\n          }\n          for (let i = 0; i < longitude.length; i++) {\n            // console.log(latitude[i]);\n            longitude[i] = longitude[i].toString();\n          }\n          const formData = new FormData();\n          formData.append(\"audio\", blob);\n          formData.append(\"filename\", fileName);\n          formData.append(\"date\", date);\n          formData.append(\"time\", time);\n          if (latitude.length === 1) {\n            formData.append('latitude', '');\n          }\n          latitude.forEach((latitude, index) => {\n            formData.append('latitude', latitude);\n          });\n          if (latitude.length === 1) {\n            formData.append(\"longitude\", '');\n          }\n          longitude.forEach((longitude, index) => {\n            formData.append(\"longitude\", longitude);\n          });\n          formData.append(\"duration\", duration);\n          formData.append(\"alias\", auth.user.alias);\n          formData.append(\"ip\", user.ip);\n          formData.append(\"iptype\", user.iptype);\n          formData.append(\"searchname\", user.name);\n          formData.append(\"searchtype\", user.type);\n          formData.append(\"searchversion\", user.version);\n          formData.append(\"devicebrand\", user.device.brand);\n          formData.append(\"devicename\", user.device.name);\n          formData.append(\"devicetype\", user.device.type);\n          formData.append(\"osname\", user.os.name);\n          formData.append(\"ostype\", user.os.type);\n          fetch(`${baseURL}/audio`, {\n            method: 'POST',\n            body: formData\n          }).then(response => response.json()).then(data => {\n            console.log(data);\n            setAlert(true);\n            setAlertTime(200);\n          });\n          audio.srcObject = null;\n        };\n        function runInterval() {\n          interval = setInterval(() => {\n            duration++;\n            if (duration < 10) durationBtn.innerHTML = `00:0${duration}`;else if (duration < 60) durationBtn.innerHTML = `00:${duration}`;else durationBtn.innerHTML = `0${duration / 60}:${duration % 60}`;\n          }, 1000);\n        }\n      });\n    }).catch(function (err) {\n      console.log(err.name, err.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-sec\",\n    children: [alert ? /*#__PURE__*/_jsxDEV(Alert, {\n      text: \"File Saved\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 22\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Record Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"audio\", {\n        autoPlay: true,\n        controls: true,\n        muted: true,\n        className: \"audioCtr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"audio-rec\",\n      onClick: handleClick,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-sec-btn\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"audio-duration duration\",\n        children: \"00:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"audiobtnPauseReco\",\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"audiobtnResumeReco\",\n        style: {\n          display: \"none\"\n        },\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"audiobtnStopReco\",\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 9\n  }, this);\n};\n_s(AudioRecord, \"NPNeFJ8FLD19TqERt3G2X0Ni4/0=\");\n_c = AudioRecord;\nexport default AudioRecord;\nvar _c;\n$RefreshReg$(_c, \"AudioRecord\");","map":{"version":3,"names":["useContext","React","CartContext","Alert","jsxDEV","_jsxDEV","AudioRecord","_s","auth","formatDate","formatTime","user","baseURL","duration","interval","intervalLoc","setAlertTime","time","setTimeout","setAlert","handleClick","navigator","mediaDevices","getDisplayMedia","video","audio","then","screenStream","micConstraints","getUserMedia","micStream","mediaStreamObj","MediaStream","context","AudioContext","audioDestinationNode","createMediaStreamDestination","getAudioTracks","length","micSource","createMediaStreamSource","micGain","createGain","gain","value","connect","systemSource","systemGain","stream","forEach","audioTrack","addTrack","document","querySelector","recordAudio","audioBtn","durationBtn","audioPause","getElementById","audioResume","audioStop","style","display","screenTrackWithAudio","getTracks","audioTracks","_recordedChunks","srcObject","defaultMuted","innerHTML","runInterval","latitude","longitude","setInterval","geolocation","getCurrentPosition","pos","size","lt","coords","ln","console","log","Math","abs","push","mediaRecorder","MediaRecorder","start","addEventListener","pause","resume","stop","ondataavailable","e","data","onpause","clearInterval","onresume","onstop","ev","track","blob","Blob","type","fileName","prompt","date","i","toString","formData","FormData","append","index","alias","ip","iptype","name","version","device","brand","os","fetch","method","body","response","json","catch","err","message","className","children","alert","text","_jsxFileName","lineNumber","columnNumber","autoPlay","controls","muted","onClick","id","_c","$RefreshReg$"],"sources":["/Users/ashishkumar/Desktop/Labs Co/Resume Projects/Smart Snapper/frontend/src/components/AudioRecord.js"],"sourcesContent":["import { useContext } from 'react';\r\nimport React from 'react'\r\nimport { CartContext } from '../CartContext';\r\nimport Alert from './Alert';\r\n\r\nconst AudioRecord = () => {\r\n\r\n    const { auth, formatDate, formatTime, user, baseURL} = useContext(CartContext);\r\n\r\n    let duration = 0;\r\n    let interval, intervalLoc;\r\n\r\n    const setAlertTime = (time) => {\r\n        setTimeout(() => {\r\n            setAlert(false);\r\n        }, time);\r\n    }\r\n\r\n\r\n    const handleClick = async () => {\r\n\r\n        await navigator.mediaDevices.getDisplayMedia({\r\n            video: true,\r\n            audio: true\r\n        }).then(async (screenStream) => {\r\n\r\n            var micConstraints = { audio: true };\r\n            navigator.mediaDevices.getUserMedia(micConstraints).then(function (micStream) {\r\n\r\n                //create a new stream in which to pack everything together\r\n                var mediaStreamObj = new MediaStream();\r\n\r\n                //create new Audio Context\r\n                var context = new AudioContext();\r\n\r\n                //create new MediaStream destination. This is were our final stream will be.\r\n                var audioDestinationNode = context.createMediaStreamDestination();\r\n\r\n                //check to see if we have a microphone stream and only then add it\r\n                if (micStream && micStream.getAudioTracks().length > 0) {\r\n                    //get the audio from the microphone stream\r\n                    const micSource = context.createMediaStreamSource(micStream);\r\n\r\n                    //set it's volume\r\n                    const micGain = context.createGain();\r\n                    micGain.gain.value = 1.0;\r\n\r\n                    //add it to the destination\r\n                    micSource.connect(micGain).connect(audioDestinationNode);\r\n                }\r\n\r\n                //check to see if we have a screen stream and only then add it\r\n                if (screenStream && screenStream.getAudioTracks().length > 0) {\r\n                    //get the audio from the screen stream\r\n                    const systemSource = context.createMediaStreamSource(screenStream);\r\n\r\n                    //set it's volume (from 0.1 to 1.0)\r\n                    const systemGain = context.createGain();\r\n                    systemGain.gain.value = 1.0;\r\n\r\n                    //add it to the destination\r\n                    systemSource.connect(systemGain).connect(audioDestinationNode);\r\n\r\n                }\r\n\r\n                //add the combined audio stream\r\n                audioDestinationNode.stream.getAudioTracks().forEach(function (audioTrack) {\r\n                    mediaStreamObj.addTrack(audioTrack);\r\n                });\r\n\r\n                // assets\r\n                let audio = document.querySelector(\".audioCtr\");\r\n                let recordAudio = document.querySelector(\".audio-sec-btn\");\r\n                let audioBtn = document.querySelector(\".audio-rec\");\r\n                let durationBtn = document.querySelector(\".audio-duration\");\r\n\r\n                // buttons\r\n                let audioPause = document.getElementById('audiobtnPauseReco');\r\n                let audioResume = document.getElementById('audiobtnResumeReco');\r\n                let audioStop = document.getElementById('audiobtnStopReco');\r\n\r\n                audioResume.style.display = \"none\";\r\n                audioPause.style.display = \"inline-block\";\r\n                audioStop.style.display = \"inline-block\";\r\n\r\n                // getting media tracks\r\n                let screenTrackWithAudio = screenStream.getTracks();\r\n                let audioTracks = micStream.getTracks();\r\n                // Chunk array to store the audio data\r\n                let _recordedChunks = [];\r\n                audio.srcObject = mediaStreamObj;\r\n                audio.defaultMuted = true;\r\n                recordAudio.style.display = \"flex\";\r\n                audioBtn.style.display = 'none';\r\n\r\n                // setting time\r\n                durationBtn.innerHTML = '00:00';\r\n                duration = 0;\r\n                runInterval();\r\n\r\n                let latitude = [], longitude = [];\r\n\r\n                intervalLoc = setInterval(() => {\r\n                    navigator.geolocation.getCurrentPosition(function (pos) {\r\n                        let size = latitude.length;\r\n                        let lt = pos.coords.latitude;\r\n                        let ln = pos.coords.longitude;\r\n                        console.log(lt, ln);\r\n                        if (size !== 0) {\r\n                            if (Math.abs(lt - latitude[size - 1]) > 0.0001 || Math.abs(ln - longitude[size - 1]) > 0.0001) {\r\n                                latitude.push(lt);\r\n                                longitude.push(ln);\r\n                            }\r\n                        } else {\r\n                            latitude.push(lt);\r\n                            longitude.push(ln);\r\n                        }\r\n                    })\r\n                }, 2000);\r\n\r\n\r\n                // setup media recorder \r\n                let mediaRecorder = new MediaRecorder(mediaStreamObj);\r\n\r\n                // Start event\r\n                mediaRecorder.start();\r\n                audioPause.addEventListener('click', () => { mediaRecorder.pause(); });\r\n                audioResume.addEventListener('click', () => { mediaRecorder.resume() });\r\n                audioStop.addEventListener('click', () => { mediaRecorder.stop(); });\r\n\r\n                mediaRecorder.ondataavailable = function (e) {\r\n                    if (e.data.size > 0)\r\n                        _recordedChunks.push(e.data);\r\n                }\r\n                mediaRecorder.onpause = async () => {\r\n                    audioPause.style.display = \"none\";\r\n                    audioResume.style.display = \"inline-block\";\r\n                    clearInterval(interval);\r\n                };\r\n                mediaRecorder.onresume = async () => {\r\n                    audioResume.style.display = \"none\";\r\n                    audioPause.style.display = \"inline-block\";\r\n                    audioStop.style.display = \"inline-block\";\r\n                    runInterval();\r\n                };\r\n\r\n                mediaRecorder.onstop = async function (ev) {\r\n                    screenTrackWithAudio.forEach((track) => {\r\n                        track.stop();\r\n                    });\r\n                    audioTracks.forEach((track) => {\r\n                        track.stop();\r\n                    });\r\n                    clearInterval(interval);\r\n                    recordAudio.style.display = \"none\";\r\n                    audioBtn.style.display = 'inline-block';\r\n                    let blob = new Blob(_recordedChunks, { type: 'audio/mp3' });\r\n                    // let url = window.URL.createObjectURL(blob);\r\n                    let fileName = prompt(\"Enter file name\", \"my-audio\");\r\n\r\n                    let date = formatDate();\r\n                    let time = formatTime();\r\n\r\n                    clearInterval(intervalLoc);\r\n\r\n                    for (let i = 0; i < latitude.length; i++) {\r\n                        latitude[i] = latitude[i].toString();\r\n                    }\r\n                    for (let i = 0; i < longitude.length; i++) {\r\n                        // console.log(latitude[i]);\r\n                        longitude[i] = longitude[i].toString();\r\n                    }\r\n\r\n                    const formData = new FormData();\r\n                    formData.append(\"audio\", blob);\r\n                    formData.append(\"filename\", fileName);\r\n                    formData.append(\"date\", date);\r\n                    formData.append(\"time\", time);\r\n\r\n                    if (latitude.length === 1) {\r\n                        formData.append('latitude', '');\r\n                    }\r\n                    latitude.forEach((latitude, index) => {\r\n                        formData.append('latitude', latitude);\r\n                    });\r\n\r\n\r\n                    if (latitude.length === 1) {\r\n                        formData.append(\"longitude\", '');\r\n                    }\r\n                    longitude.forEach((longitude, index) => {\r\n                        formData.append(\"longitude\", longitude);\r\n                    });\r\n\r\n                    formData.append(\"duration\", duration);\r\n                    formData.append(\"alias\", auth.user.alias);\r\n\r\n                    formData.append(\"ip\", user.ip);\r\n                    formData.append(\"iptype\", user.iptype);\r\n                    formData.append(\"searchname\", user.name);\r\n                    formData.append(\"searchtype\", user.type);\r\n                    formData.append(\"searchversion\", user.version);\r\n                    formData.append(\"devicebrand\", user.device.brand);\r\n                    formData.append(\"devicename\", user.device.name);\r\n                    formData.append(\"devicetype\", user.device.type);\r\n                    formData.append(\"osname\", user.os.name);\r\n                    formData.append(\"ostype\", user.os.type);\r\n\r\n                    fetch(`${baseURL}/audio`, {\r\n                        method: 'POST',\r\n                        body: formData\r\n                    }).then((response) => response.json())\r\n                        .then((data) => {\r\n                            console.log(data);\r\n                            setAlert(true);\r\n                            setAlertTime(200);\r\n                        });\r\n\r\n                    audio.srcObject = null;\r\n                }\r\n\r\n\r\n                function runInterval() {\r\n                    interval = setInterval(() => {\r\n                        duration++;\r\n                        if (duration < 10)\r\n                            durationBtn.innerHTML = `00:0${duration}`;\r\n                        else if (duration < 60)\r\n                            durationBtn.innerHTML = `00:${duration}`;\r\n                        else\r\n                            durationBtn.innerHTML = `0${duration / 60}:${duration % 60}`;\r\n\r\n                    }, 1000);\r\n                }\r\n\r\n            })\r\n\r\n        })\r\n            .catch(function (err) {\r\n                console.log(err.name, err.message);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"audio-sec\">\r\n            {alert ? <Alert text=\"File Saved\" /> : \"\"}\r\n            <h3>Record Audio</h3>\r\n            <div>\r\n                <audio autoPlay controls muted className=\"audioCtr\"></audio>\r\n            </div>\r\n            <button className=\"audio-rec\" onClick={handleClick}>Start</button>\r\n            <div className=\"audio-sec-btn\">\r\n                <span className=\"audio-duration duration\">00:00</span>\r\n                <button id=\"audiobtnPauseReco\">Pause</button>\r\n                <button id=\"audiobtnResumeReco\" style={{ display: \"none\" }}>Resume</button>\r\n                <button id=\"audiobtnStopReco\">Stop</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AudioRecord"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}