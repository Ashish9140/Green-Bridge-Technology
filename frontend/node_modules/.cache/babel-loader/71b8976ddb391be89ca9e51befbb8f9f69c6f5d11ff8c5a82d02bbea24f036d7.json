{"ast":null,"code":"var asin = Math.asin;\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar sqrt = Math.sqrt;\nvar PI = Math.PI;\n\n// equatorial mean radius of Earth (in meters)\nvar R = 6378137;\nfunction squared(x) {\n  return x * x;\n}\nfunction toRad(x) {\n  return x * PI / 180.0;\n}\nfunction hav(x) {\n  return squared(sin(x / 2));\n}\n\n// hav(theta) = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLon - aLon)\nfunction haversineDistance(a, b) {\n  var aLat = toRad(Array.isArray(a) ? a[1] : a.latitude || a.lat);\n  var bLat = toRad(Array.isArray(b) ? b[1] : b.latitude || b.lat);\n  var aLng = toRad(Array.isArray(a) ? a[0] : a.longitude || a.lng || a.lon);\n  var bLng = toRad(Array.isArray(b) ? b[0] : b.longitude || b.lng || b.lon);\n  var ht = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLng - aLng);\n  return 2 * R * asin(sqrt(ht));\n}\nmodule.exports = haversineDistance;","map":{"version":3,"names":["asin","Math","cos","sin","sqrt","PI","R","squared","x","toRad","hav","haversineDistance","a","b","aLat","Array","isArray","latitude","lat","bLat","aLng","longitude","lng","lon","bLng","ht","module","exports"],"sources":["/Users/ashishkumar/Desktop/Labs Co/Resume Projects/Smart Snapper/frontend/node_modules/haversine-distance/index.js"],"sourcesContent":["const asin = Math.asin\nconst cos = Math.cos\nconst sin = Math.sin\nconst sqrt = Math.sqrt\nconst PI = Math.PI\n\n// equatorial mean radius of Earth (in meters)\nconst R = 6378137\n\nfunction squared (x) { return x * x }\nfunction toRad (x) { return x * PI / 180.0 }\nfunction hav (x) {\n  return squared(sin(x / 2))\n}\n\n// hav(theta) = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLon - aLon)\nfunction haversineDistance (a, b) {\n  const aLat = toRad(Array.isArray(a) ? a[1] : a.latitude || a.lat)\n  const bLat = toRad(Array.isArray(b) ? b[1] : b.latitude || b.lat)\n  const aLng = toRad(Array.isArray(a) ? a[0] : a.longitude || a.lng || a.lon)\n  const bLng = toRad(Array.isArray(b) ? b[0] : b.longitude || b.lng || b.lon)\n\n  const ht = hav(bLat - aLat) + cos(aLat) * cos(bLat) * hav(bLng - aLng)\n  return 2 * R * asin(sqrt(ht))\n}\n\nmodule.exports = haversineDistance\n"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,IAAI,CAACD,IAAI;AACtB,IAAME,GAAG,GAAGD,IAAI,CAACC,GAAG;AACpB,IAAMC,GAAG,GAAGF,IAAI,CAACE,GAAG;AACpB,IAAMC,IAAI,GAAGH,IAAI,CAACG,IAAI;AACtB,IAAMC,EAAE,GAAGJ,IAAI,CAACI,EAAE;;AAElB;AACA,IAAMC,CAAC,GAAG,OAAO;AAEjB,SAASC,OAAOA,CAAEC,CAAC,EAAE;EAAE,OAAOA,CAAC,GAAGA,CAAC;AAAC;AACpC,SAASC,KAAKA,CAAED,CAAC,EAAE;EAAE,OAAOA,CAAC,GAAGH,EAAE,GAAG,KAAK;AAAC;AAC3C,SAASK,GAAGA,CAAEF,CAAC,EAAE;EACf,OAAOD,OAAO,CAACJ,GAAG,CAACK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5B;;AAEA;AACA,SAASG,iBAAiBA,CAAEC,CAAC,EAAEC,CAAC,EAAE;EAChC,IAAMC,IAAI,GAAGL,KAAK,CAACM,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAACK,QAAQ,IAAIL,CAAC,CAACM,GAAG,CAAC;EACjE,IAAMC,IAAI,GAAGV,KAAK,CAACM,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAACI,QAAQ,IAAIJ,CAAC,CAACK,GAAG,CAAC;EACjE,IAAME,IAAI,GAAGX,KAAK,CAACM,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAACS,SAAS,IAAIT,CAAC,CAACU,GAAG,IAAIV,CAAC,CAACW,GAAG,CAAC;EAC3E,IAAMC,IAAI,GAAGf,KAAK,CAACM,KAAK,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAACQ,SAAS,IAAIR,CAAC,CAACS,GAAG,IAAIT,CAAC,CAACU,GAAG,CAAC;EAE3E,IAAME,EAAE,GAAGf,GAAG,CAACS,IAAI,GAAGL,IAAI,CAAC,GAAGZ,GAAG,CAACY,IAAI,CAAC,GAAGZ,GAAG,CAACiB,IAAI,CAAC,GAAGT,GAAG,CAACc,IAAI,GAAGJ,IAAI,CAAC;EACtE,OAAO,CAAC,GAAGd,CAAC,GAAGN,IAAI,CAACI,IAAI,CAACqB,EAAE,CAAC,CAAC;AAC/B;AAEAC,MAAM,CAACC,OAAO,GAAGhB,iBAAiB"},"metadata":{},"sourceType":"script","externalDependencies":[]}