{"ast":null,"code":"var _jsxFileName = \"/Users/ashishkumar/Desktop/Labs Co/Resume Projects/Smart Snapper/frontend/src/components/ScreenWith.js\",\n  _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport React from 'react';\nimport { CartContext } from '../CartContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreenWith = () => {\n  _s();\n  const {\n    auth,\n    formatDate,\n    formatTime,\n    user,\n    alt,\n    baseURL\n  } = useContext(CartContext);\n  let duration = 0;\n  let interval, intervalLoc;\n  const handleClick = async () => {\n    var screenConstraints = {\n      video: true,\n      audio: true\n    };\n    navigator.mediaDevices.getDisplayMedia(screenConstraints).then(function (screenStream) {\n      /* use the screen & audio stream */\n\n      var micConstraints = {\n        audio: true\n      };\n      navigator.mediaDevices.getUserMedia(micConstraints).then(function (micStream) {\n        /* use the microphone stream */\n\n        //create a new stream in which to pack everything together\n        var mediaStreamObj = new MediaStream();\n\n        // assets\n        let screenWithAudio = document.querySelector(\".screenWithAudioCtr\");\n        let recordScreenWith = document.querySelector(\".screenWithAudio-sec-btn\");\n        let screenWithBtn = document.querySelector(\".screen-rec-withAudio\");\n        let durationBtn = document.querySelector(\".screenWithAudio-duration\");\n\n        //add the screen video stream\n        screenStream.getVideoTracks().forEach(function (videoTrack) {\n          mediaStreamObj.addTrack(videoTrack);\n        });\n\n        //create new Audio Context\n        var context = new AudioContext();\n\n        //create new MediaStream destination. This is were our final stream will be.\n        var audioDestinationNode = context.createMediaStreamDestination();\n\n        //check to see if we have a screen stream and only then add it\n        if (screenStream && screenStream.getAudioTracks().length > 0) {\n          //get the audio from the screen stream\n          const systemSource = context.createMediaStreamSource(screenStream);\n\n          //set it's volume (from 0.1 to 1.0)\n          const systemGain = context.createGain();\n          systemGain.gain.value = 1.0;\n\n          //add it to the destination\n          systemSource.connect(systemGain).connect(audioDestinationNode);\n        }\n\n        //check to see if we have a microphone stream and only then add it\n        if (micStream && micStream.getAudioTracks().length > 0) {\n          //get the audio from the microphone stream\n          const micSource = context.createMediaStreamSource(micStream);\n\n          //set it's volume\n          const micGain = context.createGain();\n          micGain.gain.value = 1.0;\n\n          //add it to the destination\n          micSource.connect(micGain).connect(audioDestinationNode);\n        }\n\n        //add the combined audio stream\n        audioDestinationNode.stream.getAudioTracks().forEach(function (audioTrack) {\n          mediaStreamObj.addTrack(audioTrack);\n        });\n\n        // getting media tracks\n        let screenTrackWithAudio = screenStream.getTracks();\n        let audioTracks = micStream.getTracks();\n        {\n          // buttons\n          let screenWithAudioPause = document.getElementById('screenWithAudiobtnPauseReco');\n          let screenWithAudioResume = document.getElementById('screenWithAudiobtnResumeReco');\n          let screenWithAudioStop = document.getElementById('screenWithAudiobtnStopReco');\n          screenWithAudioResume.style.display = \"none\";\n          screenWithAudioPause.style.display = \"inline-block\";\n          screenWithAudioStop.style.display = \"inline-block\";\n\n          // Chunk array to store the audio data\n          let _recordedChunks = [];\n          screenWithAudio.srcObject = mediaStreamObj;\n          screenWithBtn.style.display = \"none\";\n          recordScreenWith.style.display = \"flex\";\n\n          // setting time\n          runInterval();\n          durationBtn.innerHTML = '00:00';\n          duration = 0;\n          let latitude = [],\n            longitude = [];\n          intervalLoc = setInterval(() => {\n            navigator.geolocation.getCurrentPosition(function (pos) {\n              let size = latitude.length;\n              let lt = pos.coords.latitude;\n              let ln = pos.coords.longitude;\n              console.log(lt, ln);\n              if (size !== 0) {\n                if (Math.abs(lt - latitude[size - 1]) > 0.0001 || Math.abs(ln - longitude[size - 1]) > 0.0001) {\n                  latitude.push(lt);\n                  longitude.push(ln);\n                }\n              } else {\n                latitude.push(lt);\n                longitude.push(ln);\n              }\n            });\n          }, 2000);\n\n          // setup media recorder \n          let mediaRecorder = new MediaRecorder(mediaStreamObj);\n\n          // Start event\n          mediaRecorder.start();\n          screenWithAudioPause.addEventListener('click', () => {\n            mediaRecorder.pause();\n          });\n          screenWithAudioResume.addEventListener('click', () => {\n            mediaRecorder.resume();\n          });\n          screenWithAudioStop.addEventListener('click', () => {\n            mediaRecorder.stop();\n          });\n\n          // If audio data available then push\n          // it to the chunk array\n          mediaRecorder.ondataavailable = function (e) {\n            if (e.data.size > 0) _recordedChunks.push(e.data);\n          };\n          mediaRecorder.onpause = async () => {\n            screenWithAudioPause.style.display = \"none\";\n            screenWithAudioResume.style.display = \"inline-block\";\n            clearInterval(interval);\n          };\n          mediaRecorder.onresume = async () => {\n            screenWithAudioResume.style.display = \"none\";\n            screenWithAudioPause.style.display = \"inline-block\";\n            screenWithAudioStop.style.display = \"inline-block\";\n            runInterval();\n          };\n\n          // Convert the audio data in to blob\n          // after stopping the recording\n          mediaRecorder.onstop = async function (ev) {\n            screenTrackWithAudio.forEach(track => {\n              track.stop();\n            });\n            audioTracks.forEach(track => {\n              track.stop();\n            });\n            clearInterval(interval);\n            screenWithBtn.style.display = \"inline-block\";\n            recordScreenWith.style.display = \"none\";\n            var blob = new Blob(_recordedChunks, {\n              type: 'video/mp4'\n            });\n            let url = window.URL.createObjectURL(blob);\n            // take file input\n            let fileName = prompt(\"Enter file name\", \"my-screen\");\n\n            // save file\n            let date = formatDate();\n            let time = formatTime();\n            clearInterval(intervalLoc);\n            for (let i = 0; i < latitude.length; i++) {\n              latitude[i] = latitude[i].toString();\n            }\n            for (let i = 0; i < longitude.length; i++) {\n              // console.log(latitude[i]);\n              longitude[i] = longitude[i].toString();\n            }\n            const formData = new FormData();\n            formData.append(\"screenwith\", blob);\n            formData.append(\"filename\", fileName);\n            formData.append(\"date\", date);\n            formData.append(\"time\", time);\n            if (latitude.length === 1) {\n              formData.append('latitude', '');\n            }\n            latitude.forEach((latitude, index) => {\n              formData.append('latitude', latitude);\n            });\n            if (latitude.length === 1) {\n              formData.append(\"longitude\", '');\n            }\n            longitude.forEach((longitude, index) => {\n              formData.append(\"longitude\", longitude);\n            });\n            formData.append(\"duration\", duration);\n            formData.append(\"alias\", auth.user.alias);\n            formData.append(\"ip\", user.ip);\n            formData.append(\"iptype\", user.iptype);\n            formData.append(\"devicebrand\", user.device.brand);\n            formData.append(\"devicename\", user.device.name);\n            formData.append(\"devicetype\", user.device.type);\n            formData.append(\"searchname\", user.name);\n            formData.append(\"searchtype\", user.type);\n            formData.append(\"searchversion\", user.version);\n            formData.append(\"osname\", user.os.name);\n            formData.append(\"ostype\", user.os.type);\n            fetch(`${baseURL}/screenwith`, {\n              method: 'POST',\n              body: formData\n            }).then(response => response.json()).then(data => {\n              console.log(data);\n              setAlert(true);\n              setAlertTime(2000);\n            });\n            screenWithAudio.srcObject = null;\n          };\n        }\n        function runInterval() {\n          interval = setInterval(() => {\n            duration++;\n            if (duration < 10) durationBtn.innerHTML = `00:0${duration}`;else if (duration < 60) durationBtn.innerHTML = `00:${duration}`;else durationBtn.innerHTML = `0${duration / 60}:${duration % 60}`;\n          }, 1000);\n        }\n      }).catch(function (err) {\n        console.log(err);\n      });\n    }).catch(function (err) {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screenWithAudio-sec\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Screen With Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        muted: true,\n        className: \"screenWithAudioCtr\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"screen-rec-withAudio\",\n      onClick: handleClick,\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"screenWithAudio-sec-btn\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"screenWithAudio-duration duration\",\n        children: \"00:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"screenWithAudiobtnPauseReco\",\n        children: \"Pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"screenWithAudiobtnResumeReco\",\n        style: {\n          display: \"none\"\n        },\n        children: \"Resume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"screenWithAudiobtnStopReco\",\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 9\n  }, this);\n};\n_s(ScreenWith, \"YUtaTZ5chJ4RJ2Yofc5g8vPzzzc=\");\n_c = ScreenWith;\nexport default ScreenWith;\nvar _c;\n$RefreshReg$(_c, \"ScreenWith\");","map":{"version":3,"names":["useContext","React","CartContext","jsxDEV","_jsxDEV","ScreenWith","_s","auth","formatDate","formatTime","user","alt","baseURL","duration","interval","intervalLoc","handleClick","screenConstraints","video","audio","navigator","mediaDevices","getDisplayMedia","then","screenStream","micConstraints","getUserMedia","micStream","mediaStreamObj","MediaStream","screenWithAudio","document","querySelector","recordScreenWith","screenWithBtn","durationBtn","getVideoTracks","forEach","videoTrack","addTrack","context","AudioContext","audioDestinationNode","createMediaStreamDestination","getAudioTracks","length","systemSource","createMediaStreamSource","systemGain","createGain","gain","value","connect","micSource","micGain","stream","audioTrack","screenTrackWithAudio","getTracks","audioTracks","screenWithAudioPause","getElementById","screenWithAudioResume","screenWithAudioStop","style","display","_recordedChunks","srcObject","runInterval","innerHTML","latitude","longitude","setInterval","geolocation","getCurrentPosition","pos","size","lt","coords","ln","console","log","Math","abs","push","mediaRecorder","MediaRecorder","start","addEventListener","pause","resume","stop","ondataavailable","e","data","onpause","clearInterval","onresume","onstop","ev","track","blob","Blob","type","url","window","URL","createObjectURL","fileName","prompt","date","time","i","toString","formData","FormData","append","index","alias","ip","iptype","device","brand","name","version","os","fetch","method","body","response","json","setAlert","setAlertTime","catch","err","className","children","_jsxFileName","lineNumber","columnNumber","autoPlay","muted","onClick","id","_c","$RefreshReg$"],"sources":["/Users/ashishkumar/Desktop/Labs Co/Resume Projects/Smart Snapper/frontend/src/components/ScreenWith.js"],"sourcesContent":["import { useContext } from 'react';\r\nimport React from 'react'\r\nimport { CartContext } from '../CartContext';\r\n\r\n\r\nconst ScreenWith = () => {\r\n\r\n    const { auth, formatDate, formatTime, user, alt, baseURL } = useContext(CartContext);\r\n\r\n    let duration = 0;\r\n    let interval, intervalLoc;\r\n\r\n    const handleClick = async () => {\r\n        var screenConstraints = { video: true, audio: true };\r\n        navigator.mediaDevices.getDisplayMedia(screenConstraints).then(function (screenStream) {\r\n            /* use the screen & audio stream */\r\n\r\n            var micConstraints = { audio: true };\r\n            navigator.mediaDevices.getUserMedia(micConstraints).then(function (micStream) {\r\n                /* use the microphone stream */\r\n\r\n                //create a new stream in which to pack everything together\r\n                var mediaStreamObj = new MediaStream();\r\n\r\n\r\n                // assets\r\n                let screenWithAudio = document.querySelector(\".screenWithAudioCtr\");\r\n                let recordScreenWith = document.querySelector(\".screenWithAudio-sec-btn\");\r\n                let screenWithBtn = document.querySelector(\".screen-rec-withAudio\");\r\n                let durationBtn = document.querySelector(\".screenWithAudio-duration\");\r\n\r\n                //add the screen video stream\r\n                screenStream.getVideoTracks().forEach(function (videoTrack) {\r\n                    mediaStreamObj.addTrack(videoTrack);\r\n                });\r\n\r\n                //create new Audio Context\r\n                var context = new AudioContext();\r\n\r\n                //create new MediaStream destination. This is were our final stream will be.\r\n                var audioDestinationNode = context.createMediaStreamDestination();\r\n\r\n                //check to see if we have a screen stream and only then add it\r\n                if (screenStream && screenStream.getAudioTracks().length > 0) {\r\n                    //get the audio from the screen stream\r\n                    const systemSource = context.createMediaStreamSource(screenStream);\r\n\r\n                    //set it's volume (from 0.1 to 1.0)\r\n                    const systemGain = context.createGain();\r\n                    systemGain.gain.value = 1.0;\r\n\r\n                    //add it to the destination\r\n                    systemSource.connect(systemGain).connect(audioDestinationNode);\r\n\r\n                }\r\n\r\n                //check to see if we have a microphone stream and only then add it\r\n                if (micStream && micStream.getAudioTracks().length > 0) {\r\n                    //get the audio from the microphone stream\r\n                    const micSource = context.createMediaStreamSource(micStream);\r\n\r\n                    //set it's volume\r\n                    const micGain = context.createGain();\r\n                    micGain.gain.value = 1.0;\r\n\r\n                    //add it to the destination\r\n                    micSource.connect(micGain).connect(audioDestinationNode);\r\n                }\r\n\r\n                //add the combined audio stream\r\n                audioDestinationNode.stream.getAudioTracks().forEach(function (audioTrack) {\r\n                    mediaStreamObj.addTrack(audioTrack);\r\n                });\r\n\r\n                // getting media tracks\r\n                let screenTrackWithAudio = screenStream.getTracks();\r\n                let audioTracks = micStream.getTracks();\r\n\r\n                {\r\n                    // buttons\r\n                    let screenWithAudioPause = document.getElementById('screenWithAudiobtnPauseReco');\r\n                    let screenWithAudioResume = document.getElementById('screenWithAudiobtnResumeReco');\r\n                    let screenWithAudioStop = document.getElementById('screenWithAudiobtnStopReco');\r\n\r\n                    screenWithAudioResume.style.display = \"none\";\r\n                    screenWithAudioPause.style.display = \"inline-block\";\r\n                    screenWithAudioStop.style.display = \"inline-block\";\r\n\r\n                    // Chunk array to store the audio data\r\n                    let _recordedChunks = [];\r\n                    screenWithAudio.srcObject = mediaStreamObj;\r\n                    screenWithBtn.style.display = \"none\";\r\n                    recordScreenWith.style.display = \"flex\";\r\n\r\n\r\n                    // setting time\r\n                    runInterval();\r\n                    durationBtn.innerHTML = '00:00';\r\n                    duration = 0;\r\n\r\n                    let latitude = [], longitude = [];\r\n\r\n                    intervalLoc = setInterval(() => {\r\n                        navigator.geolocation.getCurrentPosition(function (pos) {\r\n                            let size = latitude.length;\r\n                            let lt = pos.coords.latitude;\r\n                            let ln = pos.coords.longitude;\r\n                            console.log(lt, ln);\r\n                            if (size !== 0) {\r\n                                if (Math.abs(lt - latitude[size - 1]) > 0.0001 || Math.abs(ln - longitude[size - 1]) > 0.0001) {\r\n                                    latitude.push(lt);\r\n                                    longitude.push(ln);\r\n                                }\r\n                            } else {\r\n                                latitude.push(lt);\r\n                                longitude.push(ln);\r\n                            }\r\n                        })\r\n                    }, 2000);\r\n\r\n                    // setup media recorder \r\n                    let mediaRecorder = new MediaRecorder(mediaStreamObj);\r\n\r\n                    // Start event\r\n                    mediaRecorder.start();\r\n                    screenWithAudioPause.addEventListener('click', () => { mediaRecorder.pause(); });\r\n                    screenWithAudioResume.addEventListener('click', () => { mediaRecorder.resume(); });\r\n                    screenWithAudioStop.addEventListener('click', () => { mediaRecorder.stop(); });\r\n\r\n                    // If audio data available then push\r\n                    // it to the chunk array\r\n                    mediaRecorder.ondataavailable = function (e) {\r\n                        if (e.data.size > 0)\r\n                            _recordedChunks.push(e.data);\r\n                    }\r\n                    mediaRecorder.onpause = async () => {\r\n                        screenWithAudioPause.style.display = \"none\";\r\n                        screenWithAudioResume.style.display = \"inline-block\";\r\n                        clearInterval(interval);\r\n                    };\r\n                    mediaRecorder.onresume = async () => {\r\n                        screenWithAudioResume.style.display = \"none\";\r\n                        screenWithAudioPause.style.display = \"inline-block\";\r\n                        screenWithAudioStop.style.display = \"inline-block\";\r\n                        runInterval();\r\n                    };\r\n\r\n                    // Convert the audio data in to blob\r\n                    // after stopping the recording\r\n                    mediaRecorder.onstop = async function (ev) {\r\n                        screenTrackWithAudio.forEach((track) => {\r\n                            track.stop();\r\n                        });\r\n                        audioTracks.forEach((track) => {\r\n                            track.stop();\r\n                        });\r\n                        clearInterval(interval);\r\n                        screenWithBtn.style.display = \"inline-block\";\r\n                        recordScreenWith.style.display = \"none\";\r\n                        var blob = new Blob(_recordedChunks, { type: 'video/mp4' });\r\n                        let url = window.URL.createObjectURL(blob);\r\n                        // take file input\r\n                        let fileName = prompt(\"Enter file name\", \"my-screen\");\r\n\r\n                        // save file\r\n                        let date = formatDate();\r\n                        let time = formatTime();\r\n\r\n                        clearInterval(intervalLoc);\r\n\r\n                        for (let i = 0; i < latitude.length; i++) {\r\n                            latitude[i] = latitude[i].toString();\r\n                        }\r\n                        for (let i = 0; i < longitude.length; i++) {\r\n                            // console.log(latitude[i]);\r\n                            longitude[i] = longitude[i].toString();\r\n                        }\r\n\r\n                        const formData = new FormData();\r\n                        formData.append(\"screenwith\", blob);\r\n                        formData.append(\"filename\", fileName);\r\n                        formData.append(\"date\", date);\r\n                        formData.append(\"time\", time);\r\n\r\n\r\n                        if (latitude.length === 1) {\r\n                            formData.append('latitude', '');\r\n                        }\r\n                        latitude.forEach((latitude, index) => {\r\n                            formData.append('latitude', latitude);\r\n                        });\r\n\r\n\r\n                        if (latitude.length === 1) {\r\n                            formData.append(\"longitude\", '');\r\n                        }\r\n                        longitude.forEach((longitude, index) => {\r\n                            formData.append(\"longitude\", longitude);\r\n                        });\r\n\r\n\r\n                        formData.append(\"duration\", duration);\r\n                        formData.append(\"alias\", auth.user.alias);\r\n\r\n                        formData.append(\"ip\", user.ip);\r\n                        formData.append(\"iptype\", user.iptype);\r\n                        formData.append(\"devicebrand\", user.device.brand);\r\n                        formData.append(\"devicename\", user.device.name);\r\n                        formData.append(\"devicetype\", user.device.type);\r\n                        formData.append(\"searchname\", user.name);\r\n                        formData.append(\"searchtype\", user.type);\r\n                        formData.append(\"searchversion\", user.version);\r\n                        formData.append(\"osname\", user.os.name);\r\n                        formData.append(\"ostype\", user.os.type);\r\n\r\n                        fetch(`${baseURL}/screenwith`, {\r\n                            method: 'POST',\r\n                            body: formData\r\n                        }).then((response) => response.json())\r\n                            .then((data) => {\r\n                                console.log(data);\r\n                                setAlert(true);\r\n                                setAlertTime(2000);\r\n                            });\r\n\r\n                        screenWithAudio.srcObject = null;\r\n                    }\r\n                }\r\n\r\n                function runInterval() {\r\n                    interval = setInterval(() => {\r\n                        duration++;\r\n                        if (duration < 10)\r\n                            durationBtn.innerHTML = `00:0${duration}`;\r\n                        else if (duration < 60)\r\n                            durationBtn.innerHTML = `00:${duration}`;\r\n                        else\r\n                            durationBtn.innerHTML = `0${duration / 60}:${duration % 60}`;\r\n\r\n                    }, 1000);\r\n                }\r\n\r\n            })\r\n                .catch(function (err) {\r\n                    console.log(err);\r\n                });\r\n\r\n        }).catch(function (err) {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"screenWithAudio-sec\">\r\n            <h3>Screen With Audio</h3>\r\n            <div>\r\n                <video autoPlay muted className=\"screenWithAudioCtr\"></video>\r\n            </div>\r\n            <button className=\"screen-rec-withAudio\" onClick={handleClick}>Start</button>\r\n            <div className=\"screenWithAudio-sec-btn\">\r\n                <span className=\"screenWithAudio-duration duration\">00:00</span>\r\n                <button id=\"screenWithAudiobtnPauseReco\">Pause</button>\r\n                <button id=\"screenWithAudiobtnResumeReco\" style={{ display: \"none\" }}>Resume</button>\r\n                <button id=\"screenWithAudiobtnStopReco\">Stop</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScreenWith"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}